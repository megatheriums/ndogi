name: Quality Assurance
on: [push]
env:
  AWS_ACCESS_KEY_ID: ${{vars.AWS_ACCESS_KEY_ID}}
  AWS_SECRET_ACCESS_KEY: ${{secrets.AWS_SECRET_ACCESS_KEY}}
  CI_GITHUB: 1
  TF_VAR_aws_account_id: ${{vars.TF_VAR_AWS_ACCOUNT_ID}}
  TF_VAR_enable_debugging: true
  TF_VAR_environment: ghtest-${{github.sha}}
jobs:
  Setup:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3
      - name: Install Node.JS
        uses: actions/setup-node@v3
      - run: npm run setup
      - name: Cache dependencies
        uses: actions/cache/save@v3
        with:
          key: node_modules-${{github.sha}}
          path: node_modules
  Test-Node-Dependencies:
    name: Audit NPM Dependencies
    runs-on: ubuntu-latest
    needs: Setup
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3
      - name: Install Node.JS
        uses: actions/setup-node@v3
      - name: Download dependencies
        uses: actions/cache/restore@v3
        with:
          key: node_modules-${{github.sha}}
          path: node_modules
      - run: npm run test:node:audit
  Test-Node-Linting:
    name: Check Node.JS Linting
    runs-on: ubuntu-latest
    needs: Setup
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3
      - name: Install Node.JS
        uses: actions/setup-node@v3
      - name: Download dependencies
        uses: actions/cache/restore@v3
        with:
          key: node_modules-${{github.sha}}
          path: node_modules
      - run: npm run test:node:lint
  Test-Terraform-Linting:
    name: Check Terraform Linting
    runs-on: ubuntu-latest
    needs: Setup
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3
      - name: Install Terraform
        uses: hashicorp/setup-terraform@v2
      - name: Install Terragrunt
        uses: autero1/action-terragrunt@v1.3.2
        with:
          terragrunt_version: latest
          token: ${{secrets.GITHUB_TOKEN}}
      - run: npm run test:terraform:lint
  Plan:
    runs-on: ubuntu-latest
    needs: Setup
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3
      - name: Install Terraform
        uses: hashicorp/setup-terraform@v2
      - name: Install Terragrunt
        uses: autero1/action-terragrunt@v1.3.2
        with:
          terragrunt_version: latest
          token: ${{secrets.GITHUB_TOKEN}}
      - run: npm run plan
  Deploy:
    runs-on: ubuntu-latest
    needs: Plan
    continue-on-error: true
    concurrency: quality-assurance # feature-test/${{github.sha}}
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3
      - name: Install Terraform
        uses: hashicorp/setup-terraform@v2
      - name: Install Terragrunt
        uses: autero1/action-terragrunt@v1.3.2
        with:
          terragrunt_version: latest
          token: ${{secrets.GITHUB_TOKEN}}
      - name: Deploy infrastructure
        run: npm run apply
      - name: Read endpoint URL
        run: cd infrastructure && echo NDOGI_URL=$(terragrunt output url) >> $GITHUB_ENV
      - name: Install Node.JS dependencies
        run: npm run setup
      - name: Run End-to-End tests
        run: npm run test:node:e2e
  Undeploy:
    runs-on: ubuntu-latest
    needs: Deploy
    concurrency: quality-assurance # feature-test/${{github.sha}}
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3
      - name: Install Terraform
        uses: hashicorp/setup-terraform@v2
      - name: Install Terragrunt
        uses: autero1/action-terragrunt@v1.3.2
        with:
          terragrunt_version: latest
          token: ${{secrets.GITHUB_TOKEN}}
      - run: npm run destroy
